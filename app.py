import streamlit as st
import pandas as pd
from docx import Document
import io

st.set_page_config(page_title="Gerador de Declara√ß√µes",
                   page_icon="üìÑ", layout="centered")

# C√≥digo de acesso que s√≥ seu cliente sabe
CODIGO_CORRETO = "rottweilers"

st.markdown("""
    <style>
        .main { background-color: #f5f5f5; }
        .stTextInput>div>div>input { text-align: center; font-size: 20px; }
        .stButton>button { background-color: #4CAF50; color: white; font-size: 18px; padding: 10px 24px; }
        .stButton>button:hover { background-color: #45a049; }
        .stDownloadButton>button { background-color: #007BFF; color: white; font-size: 18px; padding: 10px 24px; }
        .stDownloadButton>button:hover { background-color: #0056b3; }
    </style>
""", unsafe_allow_html=True)

# T√≠tulo
st.title("üìú Gerador de Declara√ß√µes")

# Subt√≠tulo com descri√ß√£o
st.markdown("üîê **Digite o c√≥digo de acesso para continuar**")

# Entrada para o c√≥digo de acesso
codigo_digitado = st.text_input("C√≥digo de acesso", type="password")


if codigo_digitado == CODIGO_CORRETO:
    st.success("C√≥digo correto! Voc√™ pode continuar.")

    # Upload do arquivo
    st.markdown("üìÇ **Envie a planilha Excel para gerar as declara√ß√µes:**")
    uploaded_file = st.file_uploader("Envie a planilha Excel", type=["xlsx"])

    if uploaded_file is not None:
        try:
            df = pd.read_excel(
                uploaded_file, sheet_name="Respostas ao formul√°rio 1")

            # Gerar arquivo com declara√ß√µes
            def gerar_declaracoes(df):
                def gerar_texto(row):
                    # genero_masculino = row['Seu Estado Civil:'].strip().endswith(
                    #    "o") or row['Seu Estado Civil:'].strip().endswith("l")
                    # domiciliado = "domiciliado" if genero_masculino else "domiciliada"
                    # portador = "portador" if genero_masculino else "portadora"
                    # voluntario = "volunt√°rio" if genero_masculino else "volunt√°ria"

                    return (f"{row['Seu Nome Completo:']}, {row['Sua profiss√£o:'].lower()}, {row['Seu Estado Civil:'].lower()}, "
                            f"portador(a) do RG n¬∫ {row['Seu Registro Geral (RG):']} {
                        row['√ìrg√£o que Emitiu seu RG (Exemplo: Detran - RJ, SSP-CE, SSP-PE, etc):']} "
                        f"e CPF sob o n√∫mero {
                                row['Seu CPF (Por favor, adicione os pontos e confira se est√° com os 11 n√∫meros, Ex: XXX.XXX.XXX-XX):']}, "
                        f"residente e domiciliado(a) √† {row['Rua:']}, n¬∞ {
                                row['N√∫mero:']}, bairro {row['Bairro:']}, "
                        f"CEP: {row['CEP:']}, {
                                row['Cidade:']}, {row['Estado:']}, "
                        f"atua como {row['Seu Cargo Atual na EJ:']} na empresa j√∫nior, volunt√°rio(a) desde {row['M√™s e Ano que foi efetivado na EJ (como membro efetivo):']}.")

                df["Declara√ß√£o"] = df.apply(gerar_texto, axis=1)

                # Criar um arquivo .docx com as declara√ß√µes
                doc = Document()
                for text in df["Declara√ß√£o"]:
                    doc.add_paragraph(text)

                # Salvar o documento em mem√≥ria
                buffer = io.BytesIO()
                doc.save(buffer)
                buffer.seek(0)

                return buffer

            buffer = gerar_declaracoes(df)

            # Bot√£o para download
            st.download_button(
                label="üì• Baixar Declara√ß√µes",
                data=buffer,
                file_name="declaracoes.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )

        except Exception as e:
            st.error(f"‚ö† Erro ao processar a planilha: {str(e)}")

elif codigo_digitado:  # Se o c√≥digo foi digitado, mas est√° errado
    st.error("‚ùå C√≥digo incorreto. Tente novamente.")
